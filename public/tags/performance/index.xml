<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on minidump.net</title>
    <link>https://kevingosse.github.io/tags/performance/</link>
    <description>Recent content in performance on minidump.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kevingosse.github.io/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SuppressGCTransition</title>
      <link>https://kevingosse.github.io/suppressgctransition-b9a8a774edbd/</link>
      <pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/suppressgctransition-b9a8a774edbd/</guid>
      <description>While working on the second edition of the Pro .NET Memory Management book, I did some research on the SuppressGCTransition attribute introduced in .NET 5, and figured it would make a nice complimentary article.&#xA;SuppressGCTransition is an attribute you can only apply on a method decorated with the DllImport attribute. It greatly reduces the overhead of the p/invoke, as illustrated with this benchmark:&#xA;public class SuppressGcTransitionBenchmark { [Benchmark(Baseline = true)] public int PInvoke() { return Increment(42); [DllImport(&amp;#34;NativeLib.</description>
    </item>
    <item>
      <title>ReadingÂ .NET performance counters without the PerfCounter API</title>
      <link>https://kevingosse.github.io/reading-net-performance-counters-without-the-perfcounter-api-aca5eab08874/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/reading-net-performance-counters-without-the-perfcounter-api-aca5eab08874/</guid>
      <description>Note: The code was originally written as part of my job at Datadog and published on the dd-trace-dotnet repository under Apache 2.0 license.&#xA;The excerpts of code in this article are therefore licensed under the same terms. Before using them, quoting them, or redistributing them, make sure to check the terms of the license and the notice.&#xA;The Datadog .NET tracer has a feature named &amp;ldquo;runtime metrics&amp;rdquo;. It collects technical metrics about the way your application behaves and publishes them to a dedicated dashboard, that you can use to diagnose your performance issues:</description>
    </item>
    <item>
      <title>Showing unresolved functions in PerfView</title>
      <link>https://kevingosse.github.io/showing-unresolved-functions-in-perfview-ab6cd899cb94/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/showing-unresolved-functions-in-perfview-ab6cd899cb94/</guid>
      <description>One thing that has bothered me quite a bit with PerfView is how it groups all unresolved frames under the same &amp;ldquo;?!?&amp;rdquo; name. I understand that it&amp;rsquo;s a way to reduce noise, but when trying to reduce the CPU usage of an application it can be unsettling.&#xA;Take the following example:&#xA;Here, &amp;ldquo;?!?&amp;rdquo; is presented as top offender, accounting for more than 7% of the total CPU usage. But I&amp;rsquo;m missing critical information to know whether I should consider it as a bottleneck or not.</description>
    </item>
    <item>
      <title>Performance best practices in C#</title>
      <link>https://kevingosse.github.io/performance-best-practices-in-c-b85a47bdd93a/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/performance-best-practices-in-c-b85a47bdd93a/</guid>
      <description>As I recently had to compile a list of best practices in C# for Criteo, I figured it would be nice to share it publicly. The goal of this article is to provide a non-exhaustive list of code patterns to avoid, either because they&amp;rsquo;re risky or because they perform poorly. The list may seem a bit random because it&amp;rsquo;s out of context, but all the items have been spotted in our code at some point and have caused production issues.</description>
    </item>
  </channel>
</rss>
