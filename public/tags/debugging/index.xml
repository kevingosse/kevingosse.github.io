<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>debugging on minidump.net</title>
    <link>https://minidump.net/tags/debugging/</link>
    <description>Recent content in debugging on minidump.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Feb 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://minidump.net/tags/debugging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing native WinDbg extensions in C#</title>
      <link>https://minidump.net/writing-native-windbg-extensions-in-c-5390726f3cec/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/writing-native-windbg-extensions-in-c-5390726f3cec/</guid>
      <description>Using NativeAOT and ClrMD to write a native WinDbg extension in .NET.</description>
    </item>
    <item>
      <title>Finding an instance of thread by id in WinDbg</title>
      <link>https://minidump.net/finding-an-instance-of-thread-by-id-in-windbg-d9fd9a4f1bac/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/finding-an-instance-of-thread-by-id-in-windbg-d9fd9a4f1bac/</guid>
      <description>How to find an instance of System.Threading.Thread by id in WinDbg, with a .NET Core memory dump.</description>
    </item>
    <item>
      <title>Reading AsyncLocal values from a memory dump</title>
      <link>https://minidump.net/reading-asynclocal-values-from-a-memory-dump-8be356a46b29/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/reading-asynclocal-values-from-a-memory-dump-8be356a46b29/</guid>
      <description>This article explains how AsyncLocal values are stored in .NET and how to retrieve them from a memory dump.</description>
    </item>
    <item>
      <title>Analyze your memory dumps in C# with DynaMD</title>
      <link>https://minidump.net/analyze-your-memory-dumps-in-c-with-dynamd-8e4b110b9d3a/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/analyze-your-memory-dumps-in-c-with-dynamd-8e4b110b9d3a/</guid>
      <description>Browse memory structures from a memory dump in C#, just like you would with ClrMD, but in a more fluent way.</description>
    </item>
    <item>
      <title>An unconventional way of investigating a NullReferenceException</title>
      <link>https://minidump.net/an-unconventional-way-of-investigating-a-nullreferenceexception-5628cca01d6a/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/an-unconventional-way-of-investigating-a-nullreferenceexception-5628cca01d6a/</guid>
      <description>Digging into a bug in the .NET ARM64 runtime, learning about dispatch stubs, and using that knowledge to diagnose a NullReferenceException.</description>
    </item>
    <item>
      <title>Debugging a native deadlock in a .NET Linux application</title>
      <link>https://minidump.net/investigating-a-native-deadlock-in-a-net-linux-application-97979a005ebd/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/investigating-a-native-deadlock-in-a-net-linux-application-97979a005ebd/</guid>
      <description>This story begins when one of our integrations tests started got stuck on one PR that seemingly impacted unrelated code. This is a nice excuse to cover some concepts I haven&amp;rsquo;t touched in my previous articles, such as downloading the .NET symbols on Linux.</description>
    </item>
    <item>
      <title>AccessViolation in ObjectNative::IsLockHeld (part 2 of 2)</title>
      <link>https://minidump.net/accessviolation-in-objectnative-islockheld-part-2-of-2-a703e484113c/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/accessviolation-in-objectnative-islockheld-part-2-of-2-a703e484113c/</guid>
      <description>This is the second part of an investigation where I tried to understand why an application was randomly crashing with an &lt;code&gt;AccessViolationException&lt;/code&gt;. This part starts when, as I ran out of easy things to try, I decided to map the assembly code of the &lt;code&gt;IsLockHeld&lt;/code&gt; method to the original C++ code to understand exactly where it crashed.</description>
    </item>
    <item>
      <title>AccessViolation in ObjectNative::IsLockHeld (part 1 of 2)</title>
      <link>https://minidump.net/accessviolation-in-objectnative-islockheld-part-1-of-2-7fae4b839f9a/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/accessviolation-in-objectnative-islockheld-part-1-of-2-7fae4b839f9a/</guid>
      <description>Investigating a crash in a .NET application, caused by an AccessViolationException when inspecting the state of a lock.</description>
    </item>
    <item>
      <title>Investigating an InvalidProgramException from a memory dump (part 3 of 3)</title>
      <link>https://minidump.net/investigating-an-invalidprogramexception-from-a-memory-dump-part-3-of-3-c1d912075cb1/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/investigating-an-invalidprogramexception-from-a-memory-dump-part-3-of-3-c1d912075cb1/</guid>
      <description>In this series of article, we&amp;rsquo;re retracing how I debugged an &lt;code&gt;InvalidProgramException&lt;/code&gt;, caused by a bug in the Datadog profiler, from a memory dump sent by a customer. This is the last part of the investigation, about figuring out what is wrong with the IL code.</description>
    </item>
    <item>
      <title>Investigating an InvalidProgramException from a memory dump (part 2 of 3)</title>
      <link>https://minidump.net/investigating-an-invalidprogramexception-from-a-memory-dump-part-2-of-3-daaecd8f3cf4/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/investigating-an-invalidprogramexception-from-a-memory-dump-part-2-of-3-daaecd8f3cf4/</guid>
      <description>In this series of article, we&amp;rsquo;re retracing how I debugged an InvalidProgramException, caused by a bug in the Datadog profiler, from a memory dump sent by a customer. In this part, we extract the dynamic IL from the memory dump.</description>
    </item>
    <item>
      <title>Investigating an InvalidProgramException from a memory dump (part 1 of 3)</title>
      <link>https://minidump.net/investigating-an-invalidprogramexception-from-a-memory-dump-part-1-of-3-bce634460cc3/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/investigating-an-invalidprogramexception-from-a-memory-dump-part-1-of-3-bce634460cc3/</guid>
      <description>In this series of article, we&amp;rsquo;re retracing how I debugged an InvalidProgramException, caused by a bug in the Datadog profiler, from a memory dump sent by a customer. The first part of the investigation is an introduction to using a memory dump from a .NET application to find the information you seek.</description>
    </item>
    <item>
      <title>Check what .net core GC keywords are enabled without a debugger</title>
      <link>https://minidump.net/check-what-net-core-gc-keywords-are-enabled-without-a-debugger-d616745c0d0e/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/check-what-net-core-gc-keywords-are-enabled-without-a-debugger-d616745c0d0e/</guid>
      <description>How to inspect arbitrary values in the memory of a .net process on Linux&amp;hellip; And find an unexpected bug in the process.</description>
    </item>
    <item>
      <title>Another way to use your debugging tools</title>
      <link>https://minidump.net/another-way-to-use-your-debugging-tools-7e7f498d7a2b/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/another-way-to-use-your-debugging-tools-7e7f498d7a2b/</guid>
      <description>Using debugging tools to get rid of a nagging popup.</description>
    </item>
    <item>
      <title>Dumping stack objects with ClrMD</title>
      <link>https://minidump.net/dumping-stack-objects-with-clrmd-c002dab4651b/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/dumping-stack-objects-with-clrmd-c002dab4651b/</guid>
      <description>How to implement the WinDbg DumpStackObjects command in ClrMD.</description>
    </item>
    <item>
      <title>Debugging and fixing the Twitch desktop client</title>
      <link>https://minidump.net/debugging-and-fixing-the-twitch-desktop-client-d1b38a349186/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/debugging-and-fixing-the-twitch-desktop-client-d1b38a349186/</guid>
      <description>Showing the mindset and methodology involved in the debugging of an application you know almost nothing about.</description>
    </item>
    <item>
      <title>Writing ClrMD extensions for WinDbg and LLDB</title>
      <link>https://minidump.net/writing-clrmd-extensions-for-windbg-and-lldb-916427956f66/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://minidump.net/writing-clrmd-extensions-for-windbg-and-lldb-916427956f66/</guid>
      <description>Guide on how to write debugger extensions that are compatible with both WinDbg and LLDB.</description>
    </item>
  </channel>
</rss>
