<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software-development on minidump.net</title>
    <link>https://kevingosse.github.io/tags/software-development/</link>
    <description>Recent content in software-development on minidump.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kevingosse.github.io/tags/software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SuppressGCTransition</title>
      <link>https://kevingosse.github.io/suppressgctransition-b9a8a774edbd/</link>
      <pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/suppressgctransition-b9a8a774edbd/</guid>
      <description>While working on the second edition of the Pro .NET Memory Management book, I did some research on the SuppressGCTransition attribute introduced in .NET 5, and figured it would make a nice complimentary article.&#xA;SuppressGCTransition is an attribute you can only apply on a method decorated with the DllImport attribute. It greatly reduces the overhead of the p/invoke, as illustrated with this benchmark:&#xA;public class SuppressGcTransitionBenchmark { [Benchmark(Baseline = true)] public int PInvoke() { return Increment(42); [DllImport(&amp;#34;NativeLib.</description>
    </item>
    <item>
      <title>Writing a .NET profiler in C# — Part 4</title>
      <link>https://kevingosse.github.io/writing-a-net-profiler-in-c-part-4-c54df903b9ce/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/writing-a-net-profiler-in-c-part-4-c54df903b9ce/</guid>
      <description>Writing a .NET profiler in C# — Part 4 In part 1, we saw how NativeAOT can allow us to write a profiler in C#, and how to expose a fake COM object to use the profiling API. In part 2, we refined the solution to use instance methods instead of static methods. In part 3, we automated the process using a source generator. At this point, we have everything we need to expose an instance of ICorProfilerCallback.</description>
    </item>
    <item>
      <title>Writing a .NET profiler in C#   — Part 3</title>
      <link>https://kevingosse.github.io/writing-a-net-profiler-in-c-part-3-7d2c59fc017f/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/writing-a-net-profiler-in-c-part-3-7d2c59fc017f/</guid>
      <description>In part 1, we saw how NativeAOT can allow us to write a profiler in C#, and how to expose a fake COM object to use the profiling API. In part 2, we refined the solution to use instance methods instead of static methods. Now that we know how to interact with the profiling API, we&amp;rsquo;re going to write a source generator to automatically generate the boilerplate code needed to implement the 70+ methods declared in the ICorProfilerCallback interface.</description>
    </item>
    <item>
      <title>Writing a .NET profiler in C#  —  Part 2</title>
      <link>https://kevingosse.github.io/writing-a-net-profiler-in-c-part-2-8039da001e43/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/writing-a-net-profiler-in-c-part-2-8039da001e43/</guid>
      <description>In the first part, we saw how to mimick the layout of a COM object, and use it to expose a fake instance of IClassFactory. It worked nicely, but our solution used static methods, so it wouldn&amp;rsquo;t be convenient to track the state of the objects whenever multiple instances are expected. It would be great if we could map our COM object to an actual instance of an object in .</description>
    </item>
    <item>
      <title>Writing a .NET profiler in C# - Part 1</title>
      <link>https://kevingosse.github.io/writing-a-net-profiler-in-c-part-1-d3978aae9b12/</link>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/writing-a-net-profiler-in-c-part-1-d3978aae9b12/</guid>
      <description>.NET has a very powerful profiling API, that allows to closely monitor the runtime, dynamically rewrite methods during execution, walk the callstack of threads at arbitrary points in time, and much more. However, the entry cost to learn how to use that API is quite high. The first reason is that many features require a good knowledge of how the .NET metadata system works. The other reason is that all the documentation and examples are written in C++.</description>
    </item>
    <item>
      <title>Analyze your memory dumps in C# with DynaMD</title>
      <link>https://kevingosse.github.io/analyze-your-memory-dumps-in-c-with-dynamd-8e4b110b9d3a/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/analyze-your-memory-dumps-in-c-with-dynamd-8e4b110b9d3a/</guid>
      <description>Whenever you need to analyze complex structures in a .NET memory dump, the WinDbg scripting API quickly shows its limits. In those cases, you can instead use the ClrMD library, that will give you everything you need to inspect the memory dump from C# code.&#xA;Not everything is perfect however, and sometimes I feel like the ClrMD syntax does not feel &amp;ldquo;natural&amp;rdquo; enough. To take one concrete example, for an investigation I had to retrieve the URLs of the pending HTTP requests in a memory dump.</description>
    </item>
    <item>
      <title>Debugging a native deadlock in a .NET Linux application</title>
      <link>https://kevingosse.github.io/investigating-a-native-deadlock-in-a-net-linux-application-97979a005ebd/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/investigating-a-native-deadlock-in-a-net-linux-application-97979a005ebd/</guid>
      <description>This story begins when one of our integrations tests started got stuck on one PR that seemingly impacted unrelated code. This is a nice excuse to cover some concepts I haven&amp;rsquo;t touched in my previous articles, such as downloading the .NET symbols on Linux.&#xA;Preliminary inspection The failure was occurring in a Linux test. After a while, I managed to reproduce the issue locally in a docker container. Usually the first step would be to attach a debugger, but I didn&amp;rsquo;t want to spend the time to find the commands to inject the debugger in the container.</description>
    </item>
    <item>
      <title>AccessViolation in ObjectNative::IsLockHeld (part 2 of 2)</title>
      <link>https://kevingosse.github.io/accessviolation-in-objectnative-islockheld-part-2-of-2-a703e484113c/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/accessviolation-in-objectnative-islockheld-part-2-of-2-a703e484113c/</guid>
      <description>This is the second part of an investigation where I tried to understand why an application was randomly crashing with an AccessViolationException.&#xA;If you haven&amp;rsquo;t read it, you can find part 1 of the investigation here.&#xA;As a reminder, here is what we uncovered so far:&#xA;The server runs Orchard, with the Datadog .NET tracer, and crashes about once or twice per day&#xA;The crash dump indicated an access violation in method clr!</description>
    </item>
    <item>
      <title>AccessViolation in ObjectNative::IsLockHeld (part 1 of 2)</title>
      <link>https://kevingosse.github.io/accessviolation-in-objectnative-islockheld-part-1-of-2-7fae4b839f9a/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/accessviolation-in-objectnative-islockheld-part-1-of-2-7fae4b839f9a/</guid>
      <description>This is a two parts article. Part two is available here.&#xA;Symptoms To monitor the stability of the Datadog .NET tracer, we have a reliability environment where we continuously run mainstream applications such as Orchard. This story starts when, while preparing a release, we discovered that the latest version of our tracer was crashing the app with the message:&#xA;Application: w3wp.exe Framework Version: v4.0.30319 Description: The process was terminated due to an internal error in the .</description>
    </item>
    <item>
      <title>Investigating an InvalidProgramException from a memory dump (part 1 of 3)</title>
      <link>https://kevingosse.github.io/investigating-an-invalidprogramexception-from-a-memory-dump-part-1-of-3-bce634460cc3/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/investigating-an-invalidprogramexception-from-a-memory-dump-part-1-of-3-bce634460cc3/</guid>
      <description>Datadog automated instrumentation for .NET works by rewriting the IL of interesting methods to emit traces that are then sent to the back-end. This is a complex piece of logic, written using the profiler API, and ridden with corner-cases. And as always with complex code, bugs are bound to happen, and those can be very difficult to diagnose.&#xA;As it turns out, we had customer reports of applications throwing InvalidProgramException when using our instrumentation.</description>
    </item>
    <item>
      <title>Tricked by WebRequest</title>
      <link>https://kevingosse.github.io/c-tricked-by-webrequest-209014d99653/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/c-tricked-by-webrequest-209014d99653/</guid>
      <description>The Datadog .NET tracer uses the HTTP protocol to communicate with the agent (usually installed on the same machine) and send traces every second. We originally used HttpClient to handle the communication. However, we ran into some dependencies errors on .NET Framework (it&amp;rsquo;s a bit complicated and outside of the scope of the article, but it has something to do with us instrumenting the System.Net.HttpClient assembly while at the same time having a dependency on it), and so we decided to switch to HttpWebRequest.</description>
    </item>
    <item>
      <title>Monitor GC stats with a startup hook</title>
      <link>https://kevingosse.github.io/monitor-gc-stats-with-a-startup-hook-55aa03dedea3/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/monitor-gc-stats-with-a-startup-hook-55aa03dedea3/</guid>
      <description>.NET core startup hooks is a feature I really like, and I had a lot of fun with it in the past. Still, I had yet to find a legitimate use for them, and the opportunity finally came a few days ago.&#xA;What are startup hooks? Let&amp;rsquo;s start by a quick catch-up, for those who don&amp;rsquo;t know what startup hooks are. The feature was introduced with .net core 2.2, and allows to execute any arbitrary code in a .</description>
    </item>
    <item>
      <title>Check what .net core GC keywords are enabled without a debugger</title>
      <link>https://kevingosse.github.io/check-what-net-core-gc-keywords-are-enabled-without-a-debugger-d616745c0d0e/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/check-what-net-core-gc-keywords-are-enabled-without-a-debugger-d616745c0d0e/</guid>
      <description>… and find an unexpected bug in the process&#xA;We recently ran into performance issues, and many elements seemed to point towards the GC verbose events being enabled. To test this, I needed a way to check on live servers whether the events were activated.&#xA;Note: the whole article is about .net core on Linux. While the first part (implementation) can be transposed to any OS, I&amp;rsquo;m not sure the second part could be done on Windows without installing additional tools.</description>
    </item>
    <item>
      <title>Performance best practices in C#</title>
      <link>https://kevingosse.github.io/performance-best-practices-in-c-b85a47bdd93a/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/performance-best-practices-in-c-b85a47bdd93a/</guid>
      <description>As I recently had to compile a list of best practices in C# for Criteo, I figured it would be nice to share it publicly. The goal of this article is to provide a non-exhaustive list of code patterns to avoid, either because they&amp;rsquo;re risky or because they perform poorly. The list may seem a bit random because it&amp;rsquo;s out of context, but all the items have been spotted in our code at some point and have caused production issues.</description>
    </item>
    <item>
      <title>.NET ThreadPool starvation, and how queuing makes it worse</title>
      <link>https://kevingosse.github.io/net-threadpool-starvation-and-how-queuing-makes-it-worse-512c8d570527/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/net-threadpool-starvation-and-how-queuing-makes-it-worse-512c8d570527/</guid>
      <description>There has been plenty of talk about ThreadPool starvation in .NET:&#xA;https://blogs.msdn.microsoft.com/vancem/2018/10/16/diagnosing-net-core-threadpool-starvation-with-perfview-why-my-service-is-not-saturating-all-cores-or-seems-to-stall/&#xA;https://blogs.msdn.microsoft.com/vsoservice/?p=17665&#xA;Or even on the Criteo&amp;rsquo;s blog: http://labs.criteo.com/2018/09/monitor-finalizers-contention-and-threads-in-your-application/&#xA;What is it about? This is one of the numerous ways asynchronous code can break if you wait synchronously on a task.&#xA;To illustrate that, consider a web server that would execute this code:&#xA;/// ProcessRequest is called for every new request public void ProcessRequest() { DoSomethingAsync().Wait(); } You start an asynchronous operation (DoSomethingAsync) then block the current thread.</description>
    </item>
    <item>
      <title>Switching back to the UI thread in WPF/UWP, in modern C#</title>
      <link>https://kevingosse.github.io/switching-back-to-the-ui-thread-in-wpf-uwp-in-modern-c-5dc1cc8efa5e/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/switching-back-to-the-ui-thread-in-wpf-uwp-in-modern-c-5dc1cc8efa5e/</guid>
      <description>It may seem weird that in 2020 I would write an article on this subject. But I found a new approach to this problem that I had some fun experimenting with.&#xA;So what is the problem, to begin with?&#xA;A quick reminder In WinForms/WPF/UWP, you can only update controls from the UI thread. If you have code running in a background thread that needs to update some controls, you need to somehow switch to the UI thread.</description>
    </item>
    <item>
      <title>Another way to use your debugging tools</title>
      <link>https://kevingosse.github.io/another-way-to-use-your-debugging-tools-7e7f498d7a2b/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/another-way-to-use-your-debugging-tools-7e7f498d7a2b/</guid>
      <description>It&amp;rsquo;s Friday! And when it&amp;rsquo;s Friday and your computer is managed by Criteo, you have a chance to get this nice popup:&#xA;It&amp;rsquo;s really nice to warn me that my computer is going to restart in a few hours. But it would be even better if the &amp;ldquo;Hide&amp;rdquo; button wasn&amp;rsquo;t grayed out. To make things better, the close button doesn&amp;rsquo;t work either, and the window is top-most. So the only choices you have is either to restart now or to spend the Friday with this window eating your precious screen real estate.</description>
    </item>
    <item>
      <title>Dumping stack objects with ClrMD</title>
      <link>https://kevingosse.github.io/dumping-stack-objects-with-clrmd-c002dab4651b/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/dumping-stack-objects-with-clrmd-c002dab4651b/</guid>
      <description>The SOS extension for WinDbg defines a command, !DumpStackObjects (or !dso), that allows to list all the references on the stack for a given thread. It&amp;rsquo;s convenient to retrieve the value of arguments or local variables of methods in the callstack. Recently, for an investigation, I ran across the need to dump those values for a few thousand threads. Obviously this is not something you&amp;rsquo;d want to do by hand, so I checked what was possible to do with ClrMD.</description>
    </item>
    <item>
      <title>Debugging and fixing the Twitch desktop client</title>
      <link>https://kevingosse.github.io/debugging-and-fixing-the-twitch-desktop-client-d1b38a349186/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/debugging-and-fixing-the-twitch-desktop-client-d1b38a349186/</guid>
      <description>I&amp;rsquo;ve seen through the years that debugging is often misunderstood. Many people that are unfamiliar with debugging tend to think it&amp;rsquo;s all about mastering difficult and austere tools. I often had coworkers ask me &amp;ldquo;what sequence of commands should I type in WinDbg to debug this kind of issue?&amp;rdquo;, as if debugging was about applying a simple flowchart with a complex tool. This is in fact quite the opposite. Debugging is all about the mindset and the methodology, and the tooling is the simple part.</description>
    </item>
    <item>
      <title>Writing ClrMD extensions for WinDbg and LLDB</title>
      <link>https://kevingosse.github.io/writing-clrmd-extensions-for-windbg-and-lldb-916427956f66/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/writing-clrmd-extensions-for-windbg-and-lldb-916427956f66/</guid>
      <description>You may have already read the CriteoLabs article about how to write ClrMD extensions for WinDbg. As we move to Linux, we realized that we could not use our debugging toolbox anymore as it was written for WinDbg. Since LLDB is the common debugger for .net NET Core on Linux, I decided to write a compatibility layer to be able to load our extensions in the new environment. And while I was at it, I tried to make the overall process of writing such a debugger extension a bit simpler.</description>
    </item>
    <item>
      <title>Have some fun with .net core startup hooks</title>
      <link>https://kevingosse.github.io/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1/</guid>
      <description>One feature of .net core 2.2 that didn&amp;rsquo;t catch my attention immediately is the startup hooks. Put simply, this is a way to register globally a method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment.&#xA;How does it work? First, you need to create a new .</description>
    </item>
    <item>
      <title>Implementing Java ReferenceQueue and PhantomReference in C#</title>
      <link>https://kevingosse.github.io/implementing-java-referencequeue-and-phantomreference-in-c-827d7141b6e4/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/implementing-java-referencequeue-and-phantomreference-in-c-827d7141b6e4/</guid>
      <description>After reading Konrad Kokosa&amp;rsquo;s article on Java PhantomReference, I got reminded of a coding challenge a coworker gave me a few months ago, about implementing a ReferenceQueue in C#. The Java ReferenceQueue is a mechanism that allows the developer to know when an object has been garbage collected. One of the usages described by Konrad is the ability to cleanup native resources without keeping an object (and its graph of references) in memory.</description>
    </item>
    <item>
      <title>Optimizing the WinDbg DML parser</title>
      <link>https://kevingosse.github.io/optimizing-the-windbg-dml-parser-9f64419f9/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://kevingosse.github.io/optimizing-the-windbg-dml-parser-9f64419f9/</guid>
      <description>One of my pet project is writing a custom command window for WinDbg. When testing that custom command window with big outputs, I quickly noticed that the performance was unacceptable: the first few lines would be displayed smoothly, then the application would become slower and slower until almost freezing. I therefore decided to optimize my implementation: tweaking the rendering code, batching updates, … But no matter what I did, the performance was still bad.</description>
    </item>
  </channel>
</rss>
